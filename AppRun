#!/bin/bash

HERE="$(dirname "$(readlink -f "${0}")")"

progName="idm"
progArch="-x86_64"
progVer=
progRealPath="$HERE/usr/share/$progName"
progHome="$HOME/.$progName"
progBin="IDMan.exe"
progIcoD="$HOME/.local/share/applications/$progName.desktop"
progReg="/tmp/$progName.reg"

# Symlink stuff
mkdir -p "$progHome" || exit 1
# Delete broken symlinks
find -L "$progHome" -maxdepth 2 -type l -delete
# Update existing symlinks, add new symlinks
cp -urs "$progRealPath/"* "$progHome" 2> /dev/null

dkico() {
if [[ ! -f $progIcoD ]]; then

cp -r "$HERE"/usr/share/icons "$HOME"/.local/share
mkdir -p "$HOME/.local/share/applications"
DesktopFilePath="$HOME/.local/share/applications/$progName.desktop"

{ 
echo "[Desktop Entry]
Type=Application
Name=Internet Download Manager
GenericName=Download Manager
Encoding=UTF-8
Version=$progVer
Icon=$progName
Exec=${OWD}/${progName}_${progVer}${progArch}.AppImage %F
Categories=Network;
Terminal=false
StartupWMClass=$progBin
Keywords=idm,download"
} >> "$DesktopFilePath"

fi
}

# check for wine appimage
wine_file=$(find "$HOME"/Downloads "$HOME"/bin "$HOME"/.local/bin -type f \( -name '*.appimage' -o -name '*.AppImage' \) 2>/dev/null | grep -e "wine-stable" -e 'Wine-stable' | head -n 1)

if [[ -f $wine_file ]]; then

# Calling binary files from other AppImage having $ARGV0

export winecmd=$wine_file

function wine {
  $winecmd wine "$@"
}

function wineserver {
  $winecmd wineserver "$@"
}

function winetricks {
  $winecmd winetricks -q "$@"
}

else
echo "wine-stable appimage is missing can not run idm"
echo ""
echo "Download wine-stable*.appimage from https://github.com/mmtrt/WINE_AppImage/releases"
echo ""
echo "Then"
echo ""
echo "chmod +x wine-stable*.AppImage"
echo ""
echo "Also make sure you have single copy of wine-stable appimage present these locations"
echo ""
echo "$HOME/Downloads ; $HOME/bin ; $HOME/.local/bin"
exit 1
fi

# Create custom $WINEPREFIX and add $WINEDLLOVERRIDES
export WINEPREFIX="${progHome}/.wine" WINEDLLOVERRIDES="mscoree,mshtml=" WINEDEBUG=fixme-all WINEARCH=win32

if [[ ! -d $WINEPREFIX ]]; then

# link ttf & ttc fonts from root to wineprefix
mkdir -p "$WINEPREFIX"/drive_c/windows/Fonts
find /usr/share/fonts/ -type f \( -name "*.ttf" -o -name "*.ttc" \) -exec ln -vs "{}" "$WINEPREFIX"/drive_c/windows/Fonts/ \; &>/dev/null
cat > $progReg <<'EOF'
Windows Registry Editor Version 5.00

[HKEY_LOCAL_MACHINE\Software\Internet Download Manager]
"AdvIntDriverEnabled2"=dword:00000000
EOF
wine regedit $progReg
sleep 1
rm $progReg &>/dev/null
fi

fi

# Passing args to wine apps
for i; do # for i = for i in "$@"
    # Add path in Wine form (e.g. "z:/home/user/Desktop/lol.xyz")
    if [[ -f /${i#?:} ]]; then 
        args+=("z:${i#?:}")   # When opened through .desktop or Wine path (e.g. z:/*)
    elif [[ "${i:0:1}" = "-" ]]; then
        args+=("${i/#-//}")
    fi
done

# Launch wineboot/winecfg/winetricks if requested.
# If the executable exists then launch it.
case "$1" in
  "install")
    dkico
    ;;
  "winetricks")
    winetricks "$2" "$3"
    ;;
  "msiexec"|"notepad"|"regedit"|"regsvr32"|"wineboot"|"winecfg"|"wineconsole"|"winedbg"|"winefile"|"winemine"|"winepath")
    wine "$1"
    ;;
  *)
    wine "$progHome/$progBin" "${args[@]}" 2>/dev/null
    ;;
esac
